<?xml version="1.0"?>

<!DOCTYPE bindings>

<bindings id="inverse-calendar-month-view-bindings"
  xmlns="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="inverse-calendar-month-day-box"
    extends="chrome://calendar/content/calendar-month-view.xml#calendar-month-day-box">
    <implementation>
      <method name="addItem">
	<parameter name="aItem"/>
	<body><![CDATA[
    for each (ed in this.mItemData) {
	if (aItem.hashId == ed.item.hashId)
	  {
	    this.deleteItem(aItem);
	    break;
	  }
      }

    function comptor(a, b) {
      var aIsEvent = isEvent(a.item);
      var aIsTodo = isToDo(a.item);

      var bIsEvent = isEvent(b.item);
      var bIsTodo = isToDo(b.item);

      if ((!aIsEvent && !aIsTodo) || (!bIsEvent && !bIsTodo)) {
	// XXX ????
	dump ("Don't know how to sort these two events: " + a.item + " " + b.item + "\n");
	return 0;
      }

      // sort todos before events
      if (aIsTodo && bIsEvent) return -1;
      if (aIsEvent && bIsTodo) return 1;

      // XXX how do I sort todos?
      if (aIsTodo && bIsTodo) {
	return 0;
      }

      if (aIsEvent && bIsEvent) {
	// sort all day events before events with a duration
	if (a.item.startDate.isDate && !b.item.startDate.isDate) return -1;
	if (!a.item.startDate.isDate && b.item.startDate.isDate) return 1;

	var cmp;

	cmp = a.item.startDate.compare(b.item.startDate);
	if (cmp != 0)
	  return cmp;

	cmp = a.item.endDate.compare(b.item.endDate);
	if (cmp != 0)
	  return cmp;

	if (a.item.title < b.item.title)
	  return -1;
	if (a.item.title > b.item.title)
	  return 1;
      }
 
      return 0;
    }
          
    // insert the new item block (while keeping the array sorted),
    // and then relayout.
    // Note: don't use Array.Sort, because that's quicksort, which
    // is not good for an already mostly-sorted array
    var newItem = {item: aItem};
    for (i = 0; i<this.mItemData.length; ++i) {
      if (comptor(this.mItemData[i], newItem) > 0)
	break;
    }
    this.mItemData.splice(i, 0, newItem);

    this.relayout();
	  ]]></body>
      </method>

      <method name="relayout">
        <body><![CDATA[
    function createXULElement(el) {
      return document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", el);
    }

    for (var i = 0; i < this.mItemData.length; i++) {
      var itd = this.mItemData[i];

      if (!itd.box) {
	// find what element to insert before
	var before = null;
	for (var j = i+1; !before && this.mItemData[j]; j++)
	  before = this.mItemData[j].box;

	var box = createXULElement("calendar-month-day-box-item");
	box.setAttribute("context", this.getAttribute("item-context") || this.getAttribute("context"));
	box.setAttribute("class", "calendar-item");
	box.setAttribute("item-calendar", itd.item.calendar.uri.spec);
	box.setAttribute("tooltip", "itemTooltip");

	var categoriesSelectorList = "";
	if (itd.item.getProperty("CATEGORIES") != null) {
	  var categoriesList = itd.item.getProperty("CATEGORIES").split(",");
	  for (var i = 0; i < categoriesList.length; i++ ) {
	    // Remove illegal chars.
	    categoriesList[i] = categoriesList[i].replace(' ','_');
	    categoriesList[i] = categoriesList[i].toLowerCase();
	  }
	  categoriesSelectorList = categoriesList.join(" ");
	}
	box.setAttribute("item-category", categoriesSelectorList);

	this.dayitems.insertBefore(box, before);

	box.calendarView = this.monthView;
	box.item = itd.item;
	box.occurrence = itd.item;
	box.parentBox = this;
	itd.box = box;
      }
    }
	  ]]></body>
      </method>

    </implementation>
  </binding>
</bindings>
<!-- -*- Mode: xml; indent-tabs-mode: nil; -*- -->
